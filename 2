Create a query that returns a list of all employees and their superiors (for example king - Buchanan, Suyama - Buchanan, etc.).
* Last names are sufficient.
Write the full query

from "Employees" as e
select {
 employeeName: e.LastName,
 supervisor: load(e.ReportsTo).LastName
}



Create index that will allow to search orders by the name of the company which made the order.
(For example the index for query:
from index '...' where Company == 'QUICK-Stop')
Write the full index syntax.



map("Orders", (od) => {

 let comp = load(od.Company, "Companies")
 return {
 compName: comp.Name
 };

})





How many pieces in total of Filo Mix Sold?


from Orders
group by Lines[].ProductName
where Lines[].ProductName='Filo Mix'
order by Quantity as double desc
select Lines[].ProductName as Product, sum(Lines[].Quantity) as Quantity



Create index that will allow to search employees by the name of their superior last name.
(For example the index for query:
from index '...' where BossName == 'Buchanan')
Write the full index syntax

map("Employees", (emp) => {
 if (emp.ReportsTo !== null) {
 let supervisor = load(emp.ReportsTo, "Employees")
 return {
 BossName: supervisor.LastName
 };
 }
})







Create a query that returns a list of all discontinued products ordered by how many units remains in stock (from most to least,
including products out of stock).
Write the full query

from "Products" as p
where p.Discontinued = "true"
order by p.UnitsInStock as double desc
select {
  Products : p.Name
  UnitInStock:p.UnitsInStock
}


Create index that will allow to search orders by the last name of employee who handled the order.
(For example the index for query:
from index '...' where Employee == 'Buchanan')
Write the full index syntax.

map("Orders",(p)=>{
 let s= load(p.Employee,"Employees")
 return{
emp : s.LastName
 };
})





Create a query that returns a list of all products and their suppliers (for example Tofu - Produce, Pavlova - onfections, etc.).
Write the full query.

from "Products" as p
load p.Supplier as s
select {
 Supplier : s.Name
 Product : p.Name
}




Create index that will allow to search products by the name of their supplier.
(For example the index for query:
from index '...' where SupplierName == 'Exotic Liquids')
Write the full index syntax.

map("Products",(pc)=>{
    let sup=load(pc.Supplier,"Suppliers")
    return{
        SuppName:sup.Name
    }
    
})





Which team has the shortest/smallest players on average (team height average)?
Write the answer (team name, average height) + full query/index.

from m in docs.Mlb_players_news
select new{
    m.Team,
    Count=1,
    Total=m.Height,
    Avg=0
}


from r in results
group r by r.Team into g
let Total=g.Sum(x=>x.Total)
let Count= g.Sum(x=>x.Count)
select new{
    Team=g.Key,
    Total=Total,
    Count=Count,
    Avg=Total/Count
}


from index "heightavg"
order by Avg as double desc


Which team has the heaviest players (team weight average)?
Write the answer + full query/index.


from m in docs.Mlb_players_news
select new{
    m.Team,
    Count=1,
    Total=m.Weight,
    Avg=0
}


from r in results
group r by r.Team into g
let Total=g.Sum(x=>x.Total)
let Count= g.Sum(x=>x.Count)
select new{
    Team=g.Key,
    Total=Total,
    Count=Count,
    Avg=Total/Count
}


from index "heightavg"
order by Avg as double desc



Create index: Suppliers with the number of products (how many various products the shop offer by each supplier).

Map:
 
from prod in docs.Products
let supp = LoadDocument(prod.Supplier, "Suppliers")
select new { 
    SupplierName = supp.Name,
    ProductCount = 1
}
 
Reduce:
from result in results
group result by result.SupplierName into g
select new { 
    SupplierName = g.Key,
    ProductCount = g.Sum(x => x.ProductCount)
}



Create index: Total number of units sold of each product.

Map:
 
from orders in docs.Orders
from line in orders.Lines
select new {
    ProductName = line.ProductName,
    UnitCount = line.Quantity
}
 
Reduce:
 
from result in results
group result by result.ProductName into g
select new { 
    ProductName = g.Key,
    UnitCount = g.Sum(x => x.UnitCount)
}




Create index: Total amount spent by each customer (you need to calculate price per each order - HW).
Map:
 
from orders in docs.Orders
from lines in orders.Lines
select new {
    OrderId = Id(orders),
    TotalSpend = (lines.PricePerUnit * lines.Quantity) - ((lines.PricePerUnit * lines.Quantity) * lines.Discount)
}
 
Reduce:
 
from result in results
group result by result.OrderId into g
select new {
    OrderId = g.Key,
    TotalSpend = g.Sum(x => x.TotalSpend)
}

1.Calculate the average number of orders handled by each employee.



2. Create an index of Categories with the number of suppliers (how many suppliers provide products in each category).



3. Calculate the total revenue generated by each product.



4. Find the top 3 most popular products based on the total quantity sold.



5. Calculate the average order value for all orders.


//ProductsBySupplier
map("Products", (p) => {
    let b = load(p.Supplier, "Suppliers") 
    return {
        SupplierName : b.Name
    }
})



//Employees_Supireors
map("Employees", (e) => {
    if(e.ReportsTo !== null) {
        let r = load(e.ReportsTo, "Employees")
        return {
            BossName : r.LastName
        };
    }
})



// orders by the name of the company which made the order.
map("Orders", (o) => {
    let c = load(o.Company, "Companies")
    return{
        Company : c.Name
    }
})




//pieces of filomix
from o in docs.Orders
from lines in o.Lines
select new {
    QuantitySum = lines.Quantity,
    ProductName = lines.ProductName
}
from result in results 
group result by result.ProductName into g
select new{
    ProductName = g.Key,
    QuantitySum = g.Sum(a => a.QuantitySum)
}




//orders by the last name of employee who handled the order.
map("Orders", (o) => {
    let e = load(o.Employee, "Employees")
    return {
        Employee : e.LastName
    }
})




//Create index: Suppliers with the number of products (how many various products the shop offer by each supplier).
from p in docs.Products
select new {
    Supplier = p.Supplier,
    ProductCount = 1
}
from result in results
group result by result.Supplier into g
select new {
    Supplier = g.Key,
    ProductCount = g.Sum(a => a.ProductCount)
}




//Total number of units sold of each product.
from o in docs.Orders
from lines in o.Lines
select new {
    ProductName = lines.ProductName,
    Units = lines.Quantity
}
from result in results 
group result by result.ProductName into g
select new {
    ProductName = g.Key,
    Units = g.Sum(a => a.Units)
}




//Total amount spent by each customer (you need to calculate price per each order - HW).
from o in docs.Orders
from lines in o.Lines
let c = LoadDocument(o.Company, "Companies")
select new{
    CompanyId = Id(c),
    Amount = (lines.PricePerUnit * lines.Quantity) * (1 - (lines.Discount))
}
from result in results
group result by result.CompanyId into g
select new {
    CompanyId = g.Key,
    Amount = g.Sum(a => a.Amount)
}




//Total number of orders placed by each customer.
from o in docs.Orders
select new {
    Company = o.Company,
    OrderCount = 1
}
from result in results 
group result by result.Company into g
select new {
    Company = g.Key,
    OrderCount = g.Sum(a => a.OrderCount)
}




//Find the product with the highest average order quantity.
from o in docs.Orders
from lines in o.Lines
select new{
    ProductName = lines.ProductName,
    Quantity = lines.Quantity,
    Avg = 0,
    Count = 1
}
from result in results
group result by result.ProductName into g
let Quantity = g.Sum(a => a.Quantity)
let Count = g.Sum(a => a.Count)
select new{
    ProductName = g.Key,
    Quantity = Quantity,
    Count = Count,
    Avg = Quantity / Count
}




//Find the employee who handled the most orders.

from o in docs.Orders
let e = LoadDocument(o.Employee, "Employees")
select new{
    EmpName = e.LastName,
    OrderCount = 1
}
//Find the employee who handled the most orders.

from o in docs.Orders
let e = LoadDocument(o.Employee, "Employees")
select new{
    EmpName = e.LastName,
    OrderCount = 1
}




//We want to know how many times each product was ordered and how much we earned for it.

from o in docs.Orders
from lines in o.Lines
select new {
    ProductName = lines.ProductName,
    OrderCount = 1,
    Total = ((lines.Quantity * lines.PricePerUnit) * (1 - lines.Discount))
}
from result in results
group result by result.ProductName into g
select new{
    ProductName = g.Key,
    OrderCount = g.Sum(a => a.OrderCount),
    Total = g.Sum(a => a.Total)
}




//Identify customers who purchased all products in a specific category.
from o in docs.Orders
from lines in o.Lines
let c = LoadDocument(o.Company, "Companies")
let p = LoadDocument(lines.Product, "Products")
let cat = LoadDocument(p.Category, "Categories")
select new {
    CompanyName = c.Name,
    CategoryName = cat.Name,
    ProductCount = 1
}
from result in results
group result by new {result.CategoryName, result.CompanyName} into g
select new {
    CategoryName = g.Key.CategoryName,
    CompanyName = g.Key.CompanyName,
    ProductCount = g.Sum(a => a.ProductCount)
}





//Identify the top-selling products by revenue.
from o in docs.Orders
from lines in o.Lines
select new {
    ProductName = lines.ProductName,
    Revenue = ((lines.Quantity * lines.PricePerUnit) - (1 - lines.Discount))
}
from result in results
group result by result.ProductName into g
select new {
    ProductName = g.Key,
    Revenue = g.Sum(a => a.Revenue)
}




//Find the customers who have placed the most orders.
from o in docs.Orders
let c = LoadDocument(o.Company, "Companies")
select new {
    Company = c.Name,
    Count = 1
}
from result in results
group result by result.Company into g
select new {
    Company = g.Key,
    Count = g.Sum(a => a.Count)
}





//Identify the top-selling products by calculating the total number of times each product appears in orders.
from o in docs.Orders
from lines in o.Lines
select new {
    Product = lines.Product,
    ProductCount = 1
}
from result in results 
group result by result.Product into g
select new {
    Product = g.Key,
    ProductCount = g.Sum(a => a.ProductCount)
}




//Create an index to compute the average price of products grouped by their category.
from p in docs.Products
let c = LoadDocument(p.Category, "Categories")
select new {
    Category = c.Name,
    Price = p.PricePerUnit,
    Avg = 0,
    Count = 1
}
from result in results
group result by result.Category into g
let Price = g.Sum(a => a.Price) 
let Count = g.Sum(a => a.Count)
select new {
    Category = g.Key,
    Price = Price,
    Count = Count,
    Avg = Price / Count
}





from p in docs.Mlb_players
select new{
    Team=p.Team,
    Avg=p["Height(inches)"],
}

from r in results
group r by r.Team into g 
select new{
    Team=g.Key,
    Avg=g.Average(x=>x.Avg)
}
from index "lop" as avg
order by avg.Avg desc
select avg.Team,avg.Avg limit 1





from "Players"
update {
    const teamMappings = {
        "ANA": "Angels",
        "ARZ": "Astros",
        "ARI": "Diamondbacks",
        "ATL": "Braves",
        "BAL": "Orioles",
        "BOS": "Red Sox",
        "CHC": "Cubs",
        "CIN": "Reds",
        "CLE": "Indians",
        "COL": "Rockies",
        "CWS": "White Sox",
        "DET": "Tigers",
        "HOU": "Astros",
        "KC": "Royals",
        "LA": "Angels",
        "LAD": "Dodgers",
        "MIA": "Marlins",
        "MIL": "Brewers",
        "MIN": "Twins",
        "NYM": "Mets",
        "NYY": "Yankees",
        "OAK": "Athletics",
        "PHI": "Phillies",
        "PIT": "Pirates",
        "SD": "Padres",
        "SEA": "Mariners",
        "SF": "Giants",
        "STL": "Cardinals",
        "TB": "Rays",
        "TEX": "Rangers",
        "TOR": "Blue Jays",
        "WAS": "Nationals",
        "MLW": "Brewers",
        "FLA": "Marlins"
    };
    if (this.Team in teamMappings) {
        this.TeamFullName = teamMappings[this.Team];
    }
}


